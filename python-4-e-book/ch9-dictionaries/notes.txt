dictionaries

#########################
--> dict()
#########################
creates an empty dictionary
>>> eng2sp = dict()
>>> print(eng2sp)
{}

#########################
--> in operator
#########################

>>> 'one' in eng2sp
True
>>> 'uno' in eng2sp
False

#########################
--> .values() method
#########################
To see whether something appears as a value in a dictionary, you can use the
method values, which returns the values as a type that can be converted to a list,
and then use the in operator:

>>> vals = list(eng2sp.values())
>>> 'uno' in vals
True

The in operator uses different algorithms for lists and dictionaries. For lists, it
uses a linear search algorithm. As the list gets longer, the search time gets longer
in direct proportion to the length of the list. For dictionaries, Python uses an
algorithm called a hash table that has a remarkable property: the in operator
takes about the same amount of time no matter how many items there are in a
dictionary. I wonâ€™t explain why hash functions are so magical, but you can read

#######################################
--> 9.1 Dictionary as a set of counters
#######################################
-- I have explained more with a code ina file called histogram.py same directory

Dictionaries have a method called get that takes a key and a default value. If the
key appears in the dictionary, get returns the corresponding value; otherwise it
returns the default value. e.g
>>> counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
>>> print(counts.get('jan', 0))
100
>>> print(counts.get('tim', 0))
0

##############################
--> 9.2 Dictionaries and files
##############################

-- go to file dictionary and files.py

###########################
--> 9.3 Looping and dictionaries
#############################
counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
for key in counts:
print(key, counts[key])

counts = { 'chuck' : 1 , 'annie' : 42, 'jan': 100}
for key in counts:
if counts[key] > 10 :
print(key, counts[key])

#############################
--> 9.4 Advanced text parsing
#############################

We can solve both these problems by using the string methods lower, punctuation,
and translate. The translate is the most subtle of the methods. Here is the
documentation for translate:
line.translate(str.maketrans(fromstr, tostr, deletestr))
Replace the characters in fromstr with the character in the same position in tostr
and delete all characters that are in deletestr. The fromstr and tostr can be
empty strings and the deletestr parameter can be omitted.

# checking the things pyton consider as punctuation
>>> import string
>>> string.punctuation
'!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'


##################################
--> debugging
################################
-go to book