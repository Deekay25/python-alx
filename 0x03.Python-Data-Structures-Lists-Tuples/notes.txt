General
Why Python programming is awesome
What are lists and how to use them
What are the differences and similarities between strings and lists
What are the most common methods of lists and how to use them
How to use lists as stacks and queues
What are list comprehensions and how to use them
What are tuples and how to use them
When to use tuples versus lists
What is a sequence
What is tuple packing
What is sequence unpacking
What is the del statement and how to use it


5.1.3. List Comprehensions
#########################
combs = []
for x in [1,2,3]:
    for y in [3,1,4]:
        if x != y:
            combs.append((x, y))
#########################
with lists comprehension
combs = [(x,y) for x in [1,2,3] for y in [3,1,4] if x!=y]


##########################################
--> stack in python3
#########################################
- a very good scenario to work with stacks is browisng session
- for examples, when a user goes into pages in a website
- when they press back, you remove the session from the stack
- it goes with a phenomenon LIFO - Last In First Out
- a code example of how it works below

    browsing_session = [1,2]
    # user goes adds to their session
    brownsing_session.append(3)
    #  when a user presses back
    browsing_session.pop()

    # a better way to do it is
    browsing_session = [1,2]
    # user goes adds to their session
    brownsing_session.append(3)
    # when a user clicks on back remove the last item
    browsing_session.pop()
    #check if the list is not empty
    if not brownsing_session:
        #taking the user to the previous website on the stack
        print('redirect',brownsing_session[-1])

##########################################
--> data types in python
#########################################

--> Numeric
    - Integers
    - floats
    - complex numbers
--> Boolean
--> sequence
    - strings
    - list
    - tuple
--> Dictionary
