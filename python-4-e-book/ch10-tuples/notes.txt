Tuples

Syntactically, a tuple is a comma-separated list of values:
>>> t = 'a', 'b', 'c', 'd', 'e'


Although it is not necessary, it is common to enclose tuples in parentheses to help
us quickly identify tuples when we look at Python code:
>>> t = ('a', 'b', 'c', 'd', 'e')
To create a tuple with a single element, you have to include the final comma:
>>> t1 = ('a',)
>>> type(t1)
<type 'tuple'>


Without the comma Python treats ('a') as an expression with a string in parentheses that evaluates to a string:
>>> t2 = ('a')
>>> type(t2)
<type 'str'>


>>> t = tuple()
>>> print(t)
()

If the argument is a sequence (string, list, or tuple), the result of the call to tuple
is a tuple with the elements of the sequence:
>>> t = tuple('lupins')
>>> print(t)
('l', 'u', 'p', 'i', 'n', 's')


Most list operators also work on tuples. The bracket operator indexes an element:
>>> t = ('a', 'b', 'c', 'd', 'e')
>>> print(t[0])
'a'

You canâ€™t modify the elements of a tuple, but you can replace one tuple with
another:
>>> t = ('A',) + t[1:]
>>> print(t)
('A', 'b', 'c', 'd', 'e')


############################################
--> 10.2 Comparing tuples
############################################

The comparison operators work with tuples and other sequences. Python starts by
comparing the first element from each sequence. If they are equal, it goes on to the
next element, and so on, until it finds elements that differ. Subsequent elements
are not considered (even if they are really big).


>>> (0, 1, 2) < (0, 3, 4)
True
>>> (0, 1, 2000000) < (0, 3, 4)
True

The sort function works the same way. It sorts primarily by first element, but in
the case of a tie, it sorts by second element, and so on.
This feature lends itself to a pattern called DSU for

Decorate a sequence by building a list of tuples with one or more sort keys
preceding the elements from the sequence,
Sort the list of tuples using the Python built-in sort, and
Undecorate by extracting the sorted elements of the sequence.

a code in comparing-tuples.py explains the concept

######################################################
--> 10.3 Tuple assignment
#######################################################

One of the unique syntactic features of the Python language is the ability to have a
tuple on the left side and a sequence on the right side of an assignment statement.
This allows you to assign more than one variable at a time to the given sequence.
In this example we have a two-element list (which is a sequence) and assign the first
and second elements of the sequence to the variables x and y in a single statement.
        >>> m = [ 'have', 'fun' ]
        >>> x, y = m
        >>> x
        'have'
        >>> y
        'fun'
        >>>


Stylistically when we use a tuple on the left side of the assignment statement, we
omit the parentheses, but the following is an equally valid syntax:
        >>> m = [ 'have', 'fun' ]
        >>> (x, y) = m
        >>> x
        'have'
        >>> y
        'fun'
        >>>

A particularly clever application of tuple assignment allows us to swap the values
of two variables in a single statement:
        >>> a, b = b, a
Both sides of this statement are tuples, but the left side is a tuple of variables;
the right side is a tuple of expressions


More generally, the right side can be any kind of sequence (string, list, or tuple).
For example, to split an email address into a user name and a domain, you could
write:
        >>> addr = 'monty@python.org'
        >>> uname, domain = addr.split('@')
The return value from split is a list with two elements; the first element is assigned
to uname, the second to domain.
        >>> print(uname)
        monty
        >>> print(domain)
        python.org
##################################
-->10.4 Dictionaries and tuples
#################################

Dictionaries have a method called items that returns a list of tuples, where each
tuple is a key-value pair:
>>> d = {'a':10, 'b':1, 'c':22}
>>> t = list(d.items())
>>> print(t)
[('b', 1), ('a', 10), ('c', 22)]


# below sort just the keys without values
>>> d = {'a':10, 'b':1, 'c':22}
>>> t = list(d.items())
>>> t
[('b', 1), ('a', 10), ('c', 22)]
>>> t.sort()
>>> t
[('a', 10), ('b', 1), ('c', 22)]
The new list is sorted in ascending alphabetical order by the key value.


##############################################
--> 10.5 Multiple assignment with dictionaries
##############################################
for key, val in list(d.items()):
print(val, key)

10 a
22 c
1 b

# a file called mul-ass-with-dic.py explains more